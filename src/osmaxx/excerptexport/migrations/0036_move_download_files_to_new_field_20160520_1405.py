# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-17 12:05
from __future__ import unicode_literals

import os

from django.db import migrations
from django.core.files import File


def download_file_name(out_putfile):
    from django.conf import settings
    return settings.OSMAXX['download_file_name'] % {
        'id': str(out_putfile.public_identifier),
        'name': os.path.basename(out_putfile.file.name) if out_putfile.file else None,
        'date': out_putfile.creation_date.strftime("%F"),
        'excerpt_name': out_putfile.export.extraction_order.excerpt.name.replace(" ", ""),
        'content_type': out_putfile.export.file_format,
        'file_extension': out_putfile.file_extension
    }


def copy_old_file_to_file_to_export(apps, schema_editor):
    OutputFile = apps.get_model('excerptexport', 'OutputFile')  # noqa

    for of in OutputFile.objects.filter(file_old__isnull=False):
        try:
            # test if underlying file exists
            of.file_old.file
        except FileNotFoundError:
            continue
        file = File(of.file_old)
        name = download_file_name(of)
        if not name.endswith('.zip'):
            name += '.zip'
        of.file.save(name, file)


def inverse_copy_old_file_to_file_to_export(apps, schema_editor):
    OutputFile = apps.get_model('excerptexport', 'OutputFile')  # noqa

    for of in OutputFile.objects.filter(file__isnull=False):
        try:
            # test if underlying file exists
            of.file.file
        except FileNotFoundError:
            continue
        new_file = File(of.file)
        new_name = new_file.name.split('/')[-1]
        of.file_old.save(new_name, new_file)
        of.file.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('excerptexport', '0035_auto_20160520_1402'),
    ]

    operations = [
        migrations.RunPython(copy_old_file_to_file_to_export, inverse_copy_old_file_to_file_to_export)
    ]
