version: '3.7'
# for local development

# to run python tests:
# docker-compose run --rm -e DJANGO_SETTINGS_MODULE=config.settings.tests django  python manage.py test

# setup project locally (migrations and static files):
# docker-compose run --rm frontend ./manage.py migrate --noinput
# docker-compose run --rm frontend ./manage.py collectstatic --noinput
# docker-compose run --rm mediator ./manage.py migrate --noinput
# docker-compose run --rm mediator ./manage.py collectstatic --noinput

services:
  reverse-proxy:
    image: geometalab/env-configurable-caddy:latest
    environment:
      # See https://caddyserver.com/docs/quick-starts/caddyfile for details
      CADDY_CONFIG: |
        :8080 {
          route {
            reverse_proxy /api* {
              to django:5000
            }
            reverse_proxy /admin* {
              to django:5000
            }
            handle /media/* {
              uri strip_prefix /media
              file_server /* {
                root /data/frontend/
                browse
              }
            }
            reverse_proxy /* {
              to frontend:8000
            }
          }
        }
    volumes:
      - frontend-media:/data/media
      - worker-data:/data/media/job_result_files
    ports:
    - 0.0.0.0:8080:8080/tcp
    networks:
      - default
    logging: &logging
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "10"
  ##### frontend START ########
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes:
      - ./osmaxx:/home/py/osmaxx
      - ./web_frontend:/home/py/web_frontend
      - ./conversion_service:/home/py/conversion_service
      - frontend-media:/data/media
      - worker-data:/data/media/job_result_files
    environment:
      - DJANGO_ALLOWED_HOSTS=*
      - DJANGO_SECRET_KEY=insecure!1
      - DJANGO_SETTINGS_MODULE=web_frontend.config.settings.local
      - DJANGO_DEBUG=true
      # set the following two lines if you want to be able to log in using OSM
      # but don't commit them!
      - SOCIAL_AUTH_OPENSTREETMAP_KEY=
      - SOCIAL_AUTH_OPENSTREETMAP_SECRET=
#     Allow access from any private-use IP, since docker assigns "random" IPs.
#     172.*.*.* is actually allowing too much, but this docker-compose file should
#     only ever be used on local development machine, anyway!
      - DJANGO_INTERNAL_IPS=172.*.*.*,10.*.*.*,192.168.*.*,127.0.0.1,${PUBLIC_LOCALHOST_IP:-192.168.2.1}
      - DJANGO_DEFAULT_FROM_EMAIL=webmaster@osmaxx.exmaple.com
      - DJANGO_SERVER_EMAIL=webmaster@osmaxx.exmaple.com
      - OSMAXX_ACCOUNT_MANAGER_EMAIL=webmaster@osmaxx.exmaple.com
      - DJANGO_LOG_LEVEL=INFO
      - DJANGO_EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - DJANGO_CSRF_COOKIE_SECURE=false
      - DJANGO_SESSION_COOKIE_SECURE=false
      - DJANGO_DATABASE_URL=postgis://frontend:insecureChangeInProduction@frontenddatabase/frontend
    networks:
      - default
    logging:
      <<: *logging
  frontenddatabase:
    image: postgis/postgis:13
    volumes:
      - frontend-database-data:/database/data
    environment:
      - PGDATA=/database/data
      - POSTGRES_DB=frontend
      - POSTGRES_USER=frontend
      - POSTGRES_PASSWORD=insecureChangeInProduction!
    networks:
      - default
    logging:
      <<: *logging
  ##### frontend END ########
  ##### CONVERSION SERVICE START ########
  mediator:
    build:
      context: .
      dockerfile: Dockerfile.mediator
    networks:
      - default
    volumes:
      - ./osmaxx:/home/py/osmaxx
      - ./web_frontend:/home/py/web_frontend
      - ./conversion_service:/home/py/conversion_service
      - worker-data:/data/media/job_result_files
    command: [honcho, -f, ./conversion_service/Procfile.mediator.dev, start]
    environment:
      - DJANGO_ALLOWED_HOSTS=*
      - DJANGO_SECRET_KEY=insecure!2
      - DJANGO_SETTINGS_MODULE=conversion_service.config.settings.local
      - DJANGO_DEBUG=true
      - DJANGO_LOG_LEVEL=INFO
      - DJANGO_DATABASE_URL=postgis://mediator:insecureChangeInProduction!@mediatordatabase/mediator
    networks:
      - default
    logging:
      <<: *logging
  mediatordatabase:
    image: postgis/postgis:13
    volumes:
      - mediator-database-data:/database/data
    environment:
      - PGDATA=/database/data
      - POSTGRES_DB=mediator
      - POSTGRES_USER=mediator
      - POSTGRES_PASSWORD=insecureChangeInProduction!
    networks:
      - default
    logging:
      <<: *logging
  worker: &worker
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      - ./osmaxx:/home/py/osmaxx
      - ./web_frontend:/home/py/web_frontend
      - ./conversion_service:/home/py/conversion_service
      - osm_data:/var/data/osm-planet
      - worker-data:/data/media/job_result_files
    environment:
      - DJANGO_SECRET_KEY=insecure!3
    networks:
      - default
    logging:
      <<: *logging
  worker-exclusive:
    <<: *worker
    environment:
      - DJANGO_SECRET_KEY=insecure!4
  conversionserviceredis:
    image: redis
    networks:
      - default
    logging:
      <<: *logging
  ##### CONVERSION SERVICE END ########
  ##### WORLD PBF UPDATER START ########
  osm-pbf-updater:
    build:
      context: osm_pbf_updater/
      dockerfile: Dockerfile
    volumes:
      - osm_data:/var/data/osm-planet
    entrypoint: /bin/bash
    command: /opt/delvelopment_download_only.sh
    # these are just examples
    # environment:
    # - osmupdate_extra_params=--base-url=download.geofabrik.de/europe/switzerland-updates/
    # - osm_planet_mirror=http://download.geofabrik.de/
    # - osm_planet_path_relative_to_mirror=europe/switzerland-latest.osm.pbf
    networks:
      - default
    logging:
      <<: *logging
  ##### WORLD PBF UPDATER END ########
  ##### OSM-BOUNDARIES START ######
  osmboundaries-database:
    # to limit scaling to exactly 1, we need to specify the container name
    container_name: osmboundaries_postgis
    image: mdillon/postgis:10
    volumes:
      - osmboundaries-postgis-data:/var/lib/postgresql
    command: postgres -B 1GB -F -S 1GB
    # command: postgres -B 2GB -F -N 512 -S 2GB
    environment:
      - POSTGRES_DB=osmboundaries
      - POSTGRES_USER=osmboundaries
      - POSTGRES_PASSWORD=osmboundaries
    networks:
      - default
    logging:
      <<: *logging
  osmboundaries-importer:
    # to limit scaling to exactly 1, we need to specify the container name
    container_name: osmboundaries_importer
    image: geometalab/osmboundaries:latest
    depends_on:
      - osmboundaries-database
    environment:
        # the same as the ones in the database above
        - POSTGRES_DB=osmboundaries
        - POSTGRES_USER=osmboundaries
        - POSTGRES_PASSWORD=osmboundaries
        # same as the link name/depends_on
        - POSTGRES_HOST=osmboundaries-database
    networks:
      - default
    logging:
      <<: *logging
  ##### OSM-BOUNDARIES END ######
volumes:
  # osmaxx
  frontend-database-data: {}
  frontend-media: {}
  mediator-database-data: {}
  worker-data: {}
  osm_data: {}
  database-postgis-data: {}
  osmboundaries-postgis-data: {}
