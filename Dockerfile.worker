# this gdal image comes with support for FileGDB
FROM geometalab/gdal-debian

USER root

# make the "en_US.UTF-8" locale so postgres will be utf-8 enabled by default
RUN apt-get update && apt-get install -y apt-utils locales && rm -rf /var/lib/apt/lists/* \
    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

################## SETUP POSTGIS DATABASE with UTF8 support #############
# explicitly set user/group IDs
RUN groupadd -r postgres --gid=999 && useradd -r -g postgres --uid=999 postgres

# grab gosu for easy step-down from root
RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture)" \
    && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture).asc" \
    && gpg --verify /usr/local/bin/gosu.asc \
    && rm /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && apt-get purge -y --auto-remove ca-certificates wget

RUN mkdir /docker-entrypoint-initdb.d

RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

ENV PG_MAJOR 9.4
ENV POSTGIS_MAJOR 2.1

RUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list

RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-common \
    && sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y\
        postgresql-${PG_MAJOR} \
        postgresql-contrib-${PG_MAJOR} \
        postgresql-${PG_MAJOR}-postgis-${POSTGIS_MAJOR} \
        postgresql-${PG_MAJOR}-postgis-scripts \
        postgresql-server-dev-${PG_MAJOR} \
        postgresql-contrib-${PG_MAJOR} \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /var/run/postgresql && chown -R 999:999 /var/run/postgresql

ENV PATH /usr/lib/postgresql/$PG_MAJOR/bin:$PATH
ENV PGDATA /var/lib/postgresql/data

RUN mkdir -p $PGDATA && chown -R 999:999 /var/lib/postgresql

RUN pg_createcluster --locale=en_US.UTF-8 -d $PGDATA 9.4 main

################## END SETUP POSTGIS DATABASE with UTF8 support #############

RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y\
\
    make \
    cmake \
    g++ \
    git-core\
    subversion\
    build-essential\
    libxml2-dev\
    libgeos-dev \
    libgeos++-dev\
    libpq-dev\
    libboost-dev\
    libboost-system-dev\
    libboost-filesystem-dev\
    libboost-thread-dev\
    libexpat1-dev \
    zlib1g-dev \
    libbz2-dev\
    libproj-dev\
    libtool\
    automake \
    libprotobuf-c0-dev\
    protobuf-c-compiler\
    lua5.2 \
    liblua5.2-0 \
    liblua5.2-dev \
    liblua5.1-0 \
    zip \
    osmctools \
    wget \
    binutils \
    libgeoip1 \
\
    python-pip \
    python3-pip \
    ipython \
    libicu-dev \
    ipython3 \
    debhelper \
\
    default-jre \
    libkakasi2-dev

WORKDIR /root/osm2pgsql

# OSM2PGSQL
RUN mkdir src &&\
    cd src &&\
    GIT_SSL_NO_VERIFY=true git clone https://github.com/openstreetmap/osm2pgsql.git &&\
    cd osm2pgsql &&\
    mkdir build &&\
    cd build &&\
    cmake ..&&\
    make &&\
    make install

ENV CODE /code
WORKDIR $CODE
RUN git clone https://github.com/giggls/mapnik-german-l10n.git mapnik-german-l10n

WORKDIR $CODE/mapnik-german-l10n/utf8translit
RUN dpkg-buildpackage -uc -us -b

WORKDIR $CODE/mapnik-german-l10n/kanjitranslit
RUN dpkg-buildpackage -uc -us -b

WORKDIR $CODE/mapnik-german-l10n/
RUN dpkg --install *utf8translit_*.deb
RUN dpkg --install *kanjitranslit_*.deb

ENV HOME /home/py

# Workaround for AUFS-related(?) permission issue:
# See https://github.com/docker/docker/issues/783#issuecomment-56013588
RUN mkdir /etc/ssl/private-copy; mv /etc/ssl/private/* /etc/ssl/private-copy/; rm -r /etc/ssl/private; mv /etc/ssl/private-copy /etc/ssl/private; chmod -R 0700 /etc/ssl/private; chown -R postgres /etc/ssl/private

# activate translit
RUN mkdir -p $HOME/osmaxx/worker $HOME/entrypoint
COPY ./docker_entrypoint/osmaxx/worker $HOME/entrypoint
COPY ./docker_entrypoint/wait-for-it/wait-for-it.sh $HOME/entrypoint/wait-for-it.sh

RUN service postgresql start && \
    gosu postgres psql -f $HOME/entrypoint/01_activate_translit.sql

RUN sed -i '1ilocal   all             all                                     trust' /etc/postgresql/9.4/main/pg_hba.conf

RUN chmod a+rx $CODE

WORKDIR $HOME

ADD ./requirements.txt $HOME/requirements.txt

RUN pip3 install honcho

RUN pip3 install -r requirements.txt

# TODO: this is just a temporary solution, use pip for production as soon as geometalab.osmaxx is published there
ADD ./osmaxx $HOME/osmaxx
ADD ./osmaxx_conversion_service $HOME/osmaxx_conversion_service

# expose modules
ENV PYTHONPATH=PYTHONPATH:$HOME
ENV DJANGO_SETTINGS_MODULE=osmaxx_conversion_service.config.settings.worker

ENTRYPOINT ["/home/py/entrypoint/entrypoint.sh"]

CMD ["bash", "-c"]
